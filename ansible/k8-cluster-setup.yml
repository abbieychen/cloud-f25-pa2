---
- name: Initialize Kubernetes cluster with cri-dockerd
  hosts: master
  become: yes
  vars:
    master_ip: "{{ hostvars[groups['master'][0]]['ansible_host'] }}"
    kubernetes_version: "v1.28.0"
    
  tasks:
    - name: Ensure directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /etc/kubernetes
        - /etc/kubernetes/manifests
        - /var/lib/kubelet

    - name: Create kubeadm config with cri-dockerd
      ansible.builtin.copy:
        dest: /root/kubeadm-config.yaml
        content: |
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: InitConfiguration
          localAPIEndpoint:
            advertiseAddress: "{{ master_ip }}"
            bindPort: 6443
          nodeRegistration:
            criSocket: "unix:///run/cri-dockerd.sock"
            name: "{{ inventory_hostname }}"
            kubeletExtraArgs:
              cgroup-driver: systemd
          ---
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: ClusterConfiguration
          kubernetesVersion: {{ kubernetes_version }}
          controlPlaneEndpoint: "{{ master_ip }}:6443"
          networking:
            serviceSubnet: "10.96.0.0/12"
            podSubnet: "10.244.0.0/16"
            dnsDomain: "cluster.local"
          ---
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          cgroupDriver: systemd
        owner: root
        group: root
        mode: '0644'

    - name: Pull Kubernetes images
      ansible.builtin.shell:
        cmd: kubeadm config images pull --config=/root/kubeadm-config.yaml
      register: image_pull
      failed_when: image_pull.rc != 0
      changed_when: "'already exists' not in image_pull.stdout"

    - name: Initialize Kubernetes cluster
      ansible.builtin.shell:
        cmd: kubeadm init --config=/root/kubeadm-config.yaml --ignore-preflight-errors=all --v=5
      args:
        creates: /etc/kubernetes/admin.conf
      register: kubeadm_init
      failed_when: kubeadm_init.rc != 0 and "This node has joined the cluster" not in kubeadm_init.stdout

    - name: Wait for cluster to be ready
      ansible.builtin.wait_for:
        path: /etc/kubernetes/admin.conf
        state: present
        timeout: 120

    - name: Set up kubectl for root user
      ansible.builtin.shell:
        cmd: |
          mkdir -p /root/.kube
          cp -f /etc/kubernetes/admin.conf /root/.kube/config
          chmod 600 /root/.kube/config
        creates: /root/.kube/config

    - name: Set up kubectl for cc user
      ansible.builtin.shell:
        cmd: |
          mkdir -p /home/cc/.kube
          cp -f /etc/kubernetes/admin.conf /home/cc/.kube/config
          chown -R cc:cc /home/cc/.kube
          chmod 600 /home/cc/.kube/config
        creates: /home/cc/.kube/config

    - name: Install Flannel CNI
      ansible.builtin.shell:
        cmd: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Remove master taint to allow workload scheduling
      ansible.builtin.shell:
        cmd: kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      ignore_errors: yes

    - name: Wait for nodes to be ready
      ansible.builtin.shell:
        cmd: kubectl wait --for=condition=Ready nodes/{{ inventory_hostname }} --timeout=300s
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: node_ready
      until: node_ready.rc == 0
      retries: 10
      delay: 30

    - name: Generate join command for workers
      ansible.builtin.shell:
        cmd: |
          kubeadm token create --print-join-command > /home/cc/join-command.sh
          echo " --cri-socket unix:///run/cri-dockerd.sock" >> /home/cc/join-command.sh
          chown cc:cc /home/cc/join-command.sh
          chmod 755 /home/cc/join-command.sh
      args:
        creates: /home/cc/join-command.sh

    - name: Display join command
      ansible.builtin.shell:
        cmd: cat /home/cc/join-command.sh
      register: join_command
      
    - name: Show join command
      ansible.builtin.debug:
        var: join_command.stdout

- name: Join worker nodes to cluster
  hosts: workers
  become: yes
  tasks:
    - name: Get join command from master
      ansible.builtin.slurp:
        src: /home/cc/join-command.sh
      register: join_command_file
      delegate_to: "{{ groups['master'][0] }}"
      
    - name: Create join script on workers
      ansible.builtin.copy:
        dest: /tmp/join-cluster.sh
        content: "{{ join_command_file.content | b64decode }}"
        mode: '0755'

    - name: Check if node is already joined
      ansible.builtin.stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf

    - name: Join worker to cluster
      ansible.builtin.shell:
        cmd: /tmp/join-cluster.sh --ignore-preflight-errors=all
      when: not kubelet_conf.stat.exists
      register: join_result
      async: 600
      poll: 10

    - name: Wait for kubelet to create config
      ansible.builtin.wait_for:
        path: /etc/kubernetes/kubelet.conf
        state: present
        timeout: 120
      when: not kubelet_conf.stat.exists

    - name: Restart kubelet service
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
      when: not kubelet_conf.stat.exists

- name: Verify cluster status
  hosts: master
  become: yes
  tasks:
    - name: Check cluster nodes
      ansible.builtin.shell:
        cmd: kubectl get nodes -o wide
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: cluster_nodes
      
    - name: Display cluster nodes
      ansible.builtin.debug:
        var: cluster_nodes.stdout

    - name: Check system pods
      ansible.builtin.shell:
        cmd: kubectl get pods -A -o wide
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: system_pods
      
    - name: Display system pods
      ansible.builtin.debug:
        var: system_pods.stdout