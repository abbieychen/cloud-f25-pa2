# - hosts: all
#   become: yes
#   tasks:
#     - name: Install Kubernetes packages
#       apt:
#         name: "{{ item }}"
#         state: present
#         update_cache: yes
#       loop:
#         - apt-transport-https
#         - ca-certificates
#         - curl
#         - kubelet
#         - kubeadm
#         - kubectl

#     - name: Hold Kubernetes packages
#       apt:
#         name: "{{ item }}"
#         state: present
#         update_cache: yes
#         allow_unauthenticated: yes
#         force: yes
#       loop:
#         - kubelet
#         - kubeadm
#         - kubectl


---
- hosts: all
  become: yes
  tasks:
    - name: Turn swap off (runtime)
      command: swapoff -a
      changed_when: false

    - name: Disable swap in fstab
      replace:
        path: /etc/fstab
        regexp: '^\s*([^#]\S*\s+\S+\s+swap\s+.*)$'
        replace: '# \1'

    - name: Enable IPv4 forwarding and bridge filtering
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1

    - name: Load br_netfilter module
      modprobe:
        name: br_netfilter
        state: present

    - name: Apply sysctl changes
      command: sysctl --system

    - name: Stop firewalld if present
      service:
        name: firewalld
        state: stopped
        enabled: no
      ignore_errors: yes

- hosts: master
  become: yes
  tasks:
    - name: Initialize Kubernetes master
      command: >
        kubeadm init
        --apiserver-advertise-address={{ ansible_default_ipv4.address }}
        --control-plane-endpoint={{ ansible_default_ipv4.address }}
        --pod-network-cidr=10.244.0.0/16
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Configure kubeconfig for current user
      become_user: "{{ ansible_user }}"
      shell: |
        mkdir -p $HOME/.kube
        sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config
      args:
        executable: /bin/bash

    - name: Apply Flannel CNI network
      command: >
        kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_cmd

    - name: Store join command for workers
      set_fact:
        k8s_join_cmd: "{{ join_cmd.stdout }} --cri-socket unix:///run/containerd/containerd.sock"
      run_once: true

- hosts: workers
  become: yes
  tasks:
    - name: Join Kubernetes cluster
      shell: "{{ hostvars[groups['master'][0]].k8s_join_cmd }}"
      args:
        creates: /etc/kubernetes/kubelet.conf